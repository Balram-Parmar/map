services:
  # PostgreSQL database for Kong
  kong-database:
    image: postgres:13
    container_name: kong-database
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
    ports:
      - "5432:5432"
    volumes:
      - kong-data:/var/lib/postgresql/data
    networks:
      - shopping-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kong Database Migration
  kong-migration:
    image: kong:3.4
    container_name: kong-migration
    command: kong migrations bootstrap
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    networks:
      - shopping-network
    depends_on:
      kong-database:
        condition: service_healthy
    restart: on-failure

  # Kong API Gateway
  kong:
    image: kong:3.4
    container_name: kong-gateway
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    ports:
      - "8000:8000"  # Proxy port
      - "8001:8001"  # Admin API port
      - "8443:8443"  # Proxy SSL port
      - "8444:8444"  # Admin API SSL port
    volumes:
      - ./kong.yml:/kong/declarative/kong.yml:ro
    networks:
      - shopping-network
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ActiveMQ Message Broker
  activemq:
    image: apache/activemq-classic:6.1.3
    container_name: activemq
    ports:
      - "61616:61616"  # OpenWire protocol
      - "61613:61613"  # STOMP protocol
      - "8161:8161"    # Web Console
    environment:
      ACTIVEMQ_ADMIN_LOGIN: admin
      ACTIVEMQ_ADMIN_PASSWORD: admin
    networks:
      - shopping-network

  # Product Service (Internal)
  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    container_name: product-service
    environment:
      PORT: 5001
    ports:
      - "5001:5001"
    networks:
      - shopping-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Order Service (Internal)
  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: order-service
    environment:
      PORT: 5002
      PRODUCT_SERVICE_URL: http://product-service:5001
    ports:
      - "5002:5002"
    networks:
      - shopping-network
    depends_on:
      product-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Customer Service (External)
  customer-service:
    build:
      context: ./customer-service
      dockerfile: Dockerfile
    container_name: customer-service
    environment:
      PORT: 5003
      KONG_GATEWAY_URL: http://kong:8000
      ACTIVEMQ_HOST: activemq
      ACTIVEMQ_PORT: 61613
    ports:
      - "5003:5003"
    networks:
      - shopping-network
    depends_on:
      - kong
      - activemq
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5003/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure

  # Payment Service (External)
  payment-service:
    build:
      context: ./payment-service
      dockerfile: Dockerfile
    container_name: payment-service
    environment:
      PORT: 5004
      ORDER_SERVICE_URL: http://order-service:5002
    ports:
      - "5004:5004"
    networks:
      - shopping-network
    depends_on:
      - order-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5004/health"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  shopping-network:
    driver: bridge

volumes:
  kong-data:
